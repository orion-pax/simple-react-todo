{"version":3,"sources":["serviceWorker.js","components/Navbar.js","components/TodoItem.js","components/todo-items.js","components/FloatingButtonComponent.js","components/AddItemComponent.js","components/MainContent.js","components/Footer.js","components/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Navbar","className","TodoItem","props","textClass","this","item","completed","type","onChange","handleChange","id","value","checked","title","onClick","handleRemoveItem","Component","todoItems","FloatingButtonComponent","handleShow","AddItemComponent","state","task","handleSubmit","bind","event","preventDefault","handleAddNew","target","name","setState","displayType","show","style","display","placeholder","MainContent","items","isLoading","prevState","map","todo","filter","newId","length","setTimeout","todos","todo_item","key","Footer","App","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.931fcdc2.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\n\nfunction Navbar(){\n    return(\n        <header className=\"navbar\">\n            <h3 className=\"app-heading\">Todo App</h3>\n        </header>\n    )\n}\n\nexport default Navbar","import React, { Component } from 'react'\n\nclass TodoItem extends Component {\n    constructor(props) {\n        super(props)\n\n    }\n    render() {\n        const {item} = this.props\n        const textClass = item.completed ? \"completed\" : null\n        return (\n            <div className=\"todo-item\">\n                <label className={textClass} >\n                    <input type=\"checkbox\" \n                        onChange={()=> this.props.handleChange(this.props.item.id)}\n                        value={this.props.item.id}\n                        checked={this.props.item.completed} \n                    />\n\n                    {this.props.item.title}\n                </label>\n                <button className=\"delete btn-rounded\" onClick={()=> this.props.handleRemoveItem(this.props.item.id)}>-</button>\n            </div>\n        )\n    }\n}\n\nexport default TodoItem","const todoItems = [\n    {\n        id : 1,\n        title: \"Todo Item Detail 1\",\n        completed: true        \n    },\n    {\n        id : 2,\n        title: \"Todo Item Detail 2\",\n        completed: false\n    },\n    {\n        id : 3,\n        title: \"Todo Item Detail 3\",\n        completed: false\n    }    \n\n]\n\nexport default todoItems","import React from 'react'\n\nfunction FloatingButtonComponent(props){\n    return(\n        <button className=\"btn-floating btn-rounded btn-success\" onClick={() => props.handleShow()}\n        >+</button>\n    )\n}\n\nexport default FloatingButtonComponent","import React, { Component } from 'react';\n\nclass AddItemComponent extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            task: \"\"\n        }\n\n        this.handleSubmit = this.handleSubmit.bind(this)\n        this.handleChange = this.handleChange.bind(this)\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n        if(this.state.task != \"\"){\n            this.props.handleShow()\n            this.props.handleAddNew(this.state.task)\n         }else{\n            this.props.handleShow()\n            return\n         }  \n    }\n\n    handleChange(event) {\n        const { name, value } = event.target\n        this.setState({\n            [name]: value\n        })\n\n        \n    }\n\n    render() {\n        const displayType = this.props.show ? \"block\" : \"none\";\n        return (\n            <div className=\"modal\" style={{ display: { displayType } }}>\n\n                <div className=\"modal-body\">\n                    <button className=\"btn-rounded modal-close\" onClick={() => this.props.handleShow()}>x</button>\n                    <form >\n                        <input type=\"text\"\n                            placeholder=\"Enter task details\"\n                            name=\"task\"\n                            onChange={this.handleChange}\n                            value={this.state.task}\n                            className=\"form-input\"\n                        />\n                        <button onClick={this.handleSubmit} className=\"right save\">save</button>\n                    </form>\n                </div>\n\n            </div>\n        );\n    }\n}\n\nexport default AddItemComponent;\n","import React, { Component } from 'react'\nimport TodoItem from '../components/TodoItem'\nimport items from './todo-items'\nimport FloatingButtonComponent from './FloatingButtonComponent'\nimport todoItems from './todo-items'\nimport AddItemComponent from './AddItemComponent'\n\nclass MainContent extends Component {\n    constructor() {\n        super()\n        this.state = {\n            todoItems: items,\n            isLoading: true,\n            show: false\n        }\n\n        this.handleChange = this.handleChange.bind(this)\n        this.handleAddNew = this.handleAddNew.bind(this)\n        this.handleRemoveItem = this.handleRemoveItem.bind(this)\n        this.handleShow = this.handleShow.bind(this)\n    }\n\n    handleChange(id) {\n        this.setState(prevState => {\n            const updatedTodos = prevState.todoItems.map(todo => {\n                if (todo.id === id) {\n                    return {\n                        ...todo,\n                        completed: !todo.completed\n                    }\n                }\n                return todo;\n            })\n            return {\n                todoItems: updatedTodos\n            }\n        })\n    }\n\n    handleShow() {\n        this.setState( prevState => ({ show: !prevState.show}))\n    }\n\n    handleRemoveItem(id) {\n        this.setState(prevState => {\n            const updatedTodos = prevState.todoItems.filter(todo => {\n                return todo.id !== id\n            })\n            return {\n                todoItems: updatedTodos\n            }\n        })\n    }\n\n    handleAddNew(title) {\n        this.setState(prevState => {\n            const newId = prevState.todoItems.length + 1\n            const updatedTodos = [...prevState.todoItems,\n            {\n                id: newId,\n                title: title,\n                completed: false\n            }]\n            return {\n                todoItems: updatedTodos\n            }\n        })\n    }\n\n    componentDidMount() {\n        setTimeout(() => {\n            this.setState({ isLoading: false })\n        }, 2000)\n    }\n\n    render() {\n\n        const todos = this.state.todoItems.map(todo_item => <TodoItem handleChange={this.handleChange} handleRemoveItem={this.handleRemoveItem} item={todo_item} key={todo_item.id} />)\n\n        return (\n            <div>\n                {\n                    this.state.isLoading ? <div className=\"loading\">loading</div> :\n                        <div>\n                            <div className=\"todo-list\">\n                                {todos}\n                            </div>\n                            {this.state.show ? <AddItemComponent handleAddNew={this.handleAddNew} show={this.state.show} handleShow={this.handleShow}/> : null}\n                            <FloatingButtonComponent handleShow={this.handleShow} />\n                        </div>\n                }\n            </div>\n        )\n    }\n}\n\nexport default MainContent","import React from 'react'\n\nfunction Footer(){\n    return(\n        <footer className=\"footer\">\n            <p>Todo App designer details here</p>\n        </footer>\n    )\n}\n\nexport default Footer","import React, { Component } from 'react'\nimport Navbar from './Navbar'\nimport MainContent from './MainContent'\nimport Footer from './Footer'\n\nclass App extends Component {\n    constructor() {\n        super()\n    }\n    render() {\n        return (\n            <div>\n                <Navbar />\n                <MainContent />\n                <Footer />\n            </div>\n        )\n    }\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport App from './components/App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}